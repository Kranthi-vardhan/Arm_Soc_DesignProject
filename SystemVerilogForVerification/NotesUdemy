Types of Signals in Test bench
1) Global Signals - Clock, reset
2) Data sinals - Read write
3) control signal - wr,OE raffr,waddr


Initial Block:
intial block is exeuted at t0,
there can be multiple initial blocks

Use case of initial block
module tb(); // initialize module

reg clk;
reg rst;

reg [3:0] temp;	// declaring an vector of size 4.

//// 1) initializing global signals
initial begin
clk = 1'b0;	// single bit binary with zero as input.
rst = 1'b0;
end

//// 2) Random signal for data/control
initial begin
temp = 4'b0100;	// 4 bit binary data with value 0100
#10;				// Skip for 10 ms
temp = 4'b1100;
#10;
end

//// 3) system task at task of simulation
intial begin
$dumpfile("dump.vcd");
$dumpvars;
end


//// 4) analyzing values of variable on console
initial begin
$monitor("Temp : %0d at time : %0t", temp,$time);
end

//// 5) Stop simulation by forcefully calling finish.
inital begin
#200;
end

endmodule 	//end of module.


Always Block;
Used to evaluate a expression when one of thr variables to changed

reg clk;

intial clk = 1'b0;
always #5 clk = ~clk; // 



duty cyle = ton/(ton+toff)
period = ton + toff;
ton = dutycycle*period

task generate(input real freq, input real dutycucle, output real ton, output real toff, output real phase);
.
.
.
endtask

task clkgen(input real phase,input real ton, input real toff);

#SESSION 3;

Hardware - reg(procedural), wire(coninuous)
variable - fixed, floating(real)
simulation - time, realtime.

fixed = 2state (0,1) 4-state (0,1,x,z)
2 state = signed, unsigned.
signed - byte,shortint, int, long
unsignd - bit7:0], bit[15:0];


logic - can be used instead of wire/reg

Arrays in System variable:
bit arr[8];
bit arr[] = {1,0,1,1};

$display ("Value : %0d",arr[0]); 
$display("value of first: %0p", arr2);

initialising array
arr[] ='{1,2,3,4,5};
arr[] = '{6{1}};
arr[] = '{default:0};


Loops - for loop, repeat, for each.
must be inside procedural block; (initial begin end)

initial begin
for(int i=0; i<10; i++) begin
.
.
.
end
end


intital begin
foreach(arr[j]) begin.
.
.
end
end

initial begin
repeat(10) begin
.
.
.
end
end

Array COPY; //arrays should have same size and type
arr2 = arr1;

Array COMPARE

int status;
status = (arr1 == arr2);
status = arr1 != arr2 ;


if(status ==1)arrs are same
else status ==0 arrs are different

Dynamic Array;
arr = new[5]; // assign size to array
arr.delete(); // to delete dynamic array
arr = new[[30](arr) // will create arr of 30 and copy the elements of arr;

